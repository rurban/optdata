.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 4.39)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OPTDATA 1"
.TH OPTDATA 1 "2021-01-19" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
optdata \- create optimal search data structures in C
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    wget ftp://ftp.unicode.org/Public/UNIDATA/Scripts.txt
\&    wc \-l <Scripts.txt
\&    2900
\&
\&    head \-n45 Scripts.txt | tail \-n20
\&
\&    0000..001F    ; Common # Cc  [32] <control\-0000>..<control\-001F>
\&    0020          ; Common # Zs       SPACE
\&    0021..0023    ; Common # Po   [3] EXCLAMATION MARK..NUMBER SIGN
\&    0024          ; Common # Sc       DOLLAR SIGN
\&    0025..0027    ; Common # Po   [3] PERCENT SIGN..APOSTROPHE
\&    0028          ; Common # Ps       LEFT PARENTHESIS
\&    0029          ; Common # Pe       RIGHT PARENTHESIS
\&    002A          ; Common # Po       ASTERISK
\&    002B          ; Common # Sm       PLUS SIGN
\&    002C          ; Common # Po       COMMA
\&    002D          ; Common # Pd       HYPHEN\-MINUS
\&    002E..002F    ; Common # Po   [2] FULL STOP..SOLIDUS
\&    0030..0039    ; Common # Nd  [10] DIGIT ZERO..DIGIT NINE
\&    003A..003B    ; Common # Po   [2] COLON..SEMICOLON
\&    003C..003E    ; Common # Sm   [3] LESS\-THAN SIGN..GREATER\-THAN SIGN
\&    003F..0040    ; Common # Po   [2] QUESTION MARK..COMMERCIAL AT
\&    005B          ; Common # Ps       LEFT SQUARE BRACKET
\&    005C          ; Common # Po       REVERSE SOLIDUS
\&    005D          ; Common # Pe       RIGHT SQUARE BRACKET
\&
\&    echo \*(Aq%\*(Aq >uniscript.in
\&    perl \-ane\*(Aq/^[0\-9]/ && print "$F[0]\et$F[2]\en"\*(Aq Scripts.txt >>uniscript.in
\&    echo \*(Aq%\*(Aq >>uniscript.in
\&
\&    cut \-f2 uniscript.in | sort | uniq \-c | sort \-rn | head \-n10
\&    492 Common
\&     70 Arabic
\&     54 Greek
\&     37 Tibetan
\&     35 Myanmar
\&     34 Latin
\&     31 Inherited
\&     30 Ethiopic
\&     30 Bengali
\&     29 Tamil
\&
\&    cut \-f2 uniscript.in | sort | uniq \-c | sort \-rn | wc \-l
\&    145
\&
\&    tail \-n3 uniscript.in
\&    10EAB..10EAC        Yezidi
\&    10EAD       Yezidi
\&    10EB0..10EB1        Yezidi
\&
\&    # Sees that the first numbers and ranges until 0040 are all of "Common",
\&    # so it might create an initial C<if (i < 0x40) return "Common";> for that.
\&    #
\&    # There are 145 unique names, most for Common, and the rest pretty evenly
\&    # distributed.
\&    #
\&    # There are 69297 (0x10EB1) entries, to a simple array lookup table or
\&    # perfect hash would be massive overkill, when we only have 145 possible
\&    # results.
\&
\&    optdata \-o uniscript.c uniscript.in
\&    cc \-shared \-fPIC uniscript.c \-o libuniscript.so
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Creates an optimal compile-time data structure to search in known data, as C
source code.  Very similar to gperf, but not as limited; perfect hashes are
not always the best datastructures to search in.
.PP
Accepts a list integers, ranges of integers or strings as input, which to
search for. Detects hex numbers and ranges seperated by \f(CW\*(C`\-\*(C'\fR or \f(CW\*(C`..\*(C'\fR automatically.
.PP
Tries various nested arrays, like 1\-way, 2\-way, 3\-way, 4\-way arrays, with
optional final binary search, simple range searches, perfect hashes, patricia
trees, or nested variants of it.  Sometimes even a simple switch statement or
nested if's are optimal.
.PP
Optimizes per default on code size, not speed. You may use option \f(CW\*(C`\-\-speed\*(C'\fR
instead.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
gperf, perl5 CharClass::Matcher
